name: 🚀 Fragrance AI - Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: fragrance-ai

jobs:
  # 🧪 테스트 단계
  test:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        test-type: ['unit', 'integration', 'security']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fragrance_ai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install -r requirements-dev.txt

    - name: 🔍 Code Quality Checks
      run: |
        # 코드 포맷팅 검사
        black --check fragrance_ai/
        isort --check-only fragrance_ai/

        # 린팅
        flake8 fragrance_ai/ --max-line-length=100 --ignore=E203,W503

        # 타입 체킹
        mypy fragrance_ai/ --ignore-missing-imports

        # 복잡도 검사
        radon cc fragrance_ai/ -a -nc

    - name: 🛡️ Security Scanning
      if: matrix.test-type == 'security'
      run: |
        # 의존성 보안 검사
        safety check

        # 코드 보안 검사
        bandit -r fragrance_ai/ -f json -o bandit-report.json

        # 비밀 정보 검사
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline

    - name: 🧪 Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/unit/ -v \
          --cov=fragrance_ai \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=95 \
          --junit-xml=pytest-results.xml

    - name: 🔗 Integration Tests
      if: matrix.test-type == 'integration'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fragrance_ai_test
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/integration/ -v \
          --junit-xml=integration-results.xml

    - name: 🚀 Performance Tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/performance/ -v \
          --benchmark-only \
          --benchmark-json=benchmark-results.json

    - name: 📊 Upload Coverage
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 🔒 보안 및 품질 게이트
  security-gate:
    name: 🔒 Security & Quality Gate
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 SAST Scanning
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false

    - name: 🛡️ Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📋 Upload SARIF results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 🏗️ 빌드 단계
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [test, security-gate]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # 🚀 배포 단계
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.fragrance-ai.com

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure kubectl
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: 🚀 Deploy to Kubernetes
      run: |
        # Helm 배포
        helm upgrade --install fragrance-ai-staging ./helm/fragrance-ai \
          --namespace staging \
          --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set ingress.hosts[0].host=staging.fragrance-ai.com \
          --wait --timeout=600s

    - name: 🧪 Health Check
      run: |
        kubectl wait --for=condition=ready pod -l app=fragrance-ai -n staging --timeout=300s

        # API 헬스체크
        curl -f https://staging.fragrance-ai.com/health || exit 1

    - name: 🧪 Smoke Tests
      run: |
        pytest tests/smoke/ --base-url=https://staging.fragrance-ai.com

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://fragrance-ai.com

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure kubectl
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: 🚀 Blue-Green Deployment
      run: |
        # 현재 버전 백업
        kubectl get deployment fragrance-ai -n production -o yaml > backup-deployment.yaml

        # 새 버전 배포
        helm upgrade --install fragrance-ai ./helm/fragrance-ai \
          --namespace production \
          --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set ingress.hosts[0].host=fragrance-ai.com \
          --set replicaCount=3 \
          --set resources.requests.cpu=500m \
          --set resources.requests.memory=1Gi \
          --set resources.limits.cpu=2000m \
          --set resources.limits.memory=4Gi \
          --wait --timeout=600s

    - name: 🔍 Production Health Check
      run: |
        # 상세 헬스체크
        kubectl wait --for=condition=ready pod -l app=fragrance-ai -n production --timeout=300s

        # API 엔드포인트 검증
        curl -f https://fragrance-ai.com/health || exit 1
        curl -f https://fragrance-ai.com/api/v2/monitoring || exit 1

    - name: 📊 Post-Deployment Monitoring
      run: |
        # 메트릭 확인
        sleep 60  # 1분 대기

        # 에러율 확인 (5% 미만이어야 함)
        ERROR_RATE=$(curl -s https://fragrance-ai.com/api/v2/monitoring | jq '.data.error_stats | length')
        if [ "$ERROR_RATE" -gt 5 ]; then
          echo "High error rate detected: $ERROR_RATE"
          exit 1
        fi

  # 📢 알림
  notify:
    name: 📢 Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: 📧 Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: 📧 Email Notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "🚨 Fragrance AI Deployment Failed"
        to: devops@fragrance-ai.com
        from: ci-cd@fragrance-ai.com
        body: |
          Deployment failed for commit ${{ github.sha }}

          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Workflow: ${{ github.workflow }}

          Please check the GitHub Actions logs for details.