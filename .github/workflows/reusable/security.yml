name: Reusable Security Scan

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.10'
      enable-dependency-check:
        description: 'Enable dependency vulnerability check'
        required: false
        type: boolean
        default: true
      enable-code-scan:
        description: 'Enable static code security scan'
        required: false
        type: boolean
        default: true
      enable-secrets-scan:
        description: 'Enable secrets detection'
        required: false
        type: boolean
        default: true

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep detect-secrets

      - name: Run Bandit security scan
        if: inputs.enable-code-scan
        run: |
          bandit -r fragrance_ai/ \
            -ll \
            -f json \
            -o bandit-report.json \
            --exclude "*/tests/*,*/test_*" || true

          if [ -f bandit-report.json ]; then
            echo "### Bandit Security Report" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('bandit-report.json') as f:
    data = json.load(f)
    print(f\"- Issues found: {len(data.get('results', []))}\")
    print(f\"- Severity breakdown:\")
    for result in data.get('results', [])[:5]:
        print(f\"  - {result.get('issue_severity', 'UNKNOWN')}: {result.get('issue_text', 'N/A')}\")
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check dependency vulnerabilities
        if: inputs.enable-dependency-check
        run: |
          safety check --json --output safety-report.json || true

          if [ -f safety-report.json ]; then
            echo "### Dependency Vulnerability Report" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('safety-report.json') as f:
    data = json.load(f)
    vulns = data.get('vulnerabilities', [])
    print(f\"- Vulnerabilities found: {len(vulns)}\")
    for v in vulns[:5]:
        print(f\"  - {v.get('package_name', 'unknown')}: {v.get('vulnerability_id', 'N/A')}\")
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run Semgrep SAST
        if: inputs.enable-code-scan
        continue-on-error: true
        run: |
          pip install semgrep
          semgrep --config=auto \
            --json \
            --output=semgrep-report.json \
            fragrance_ai/ || true

      - name: Detect secrets in code
        if: inputs.enable-secrets-scan
        run: |
          detect-secrets scan \
            --baseline .secrets.baseline \
            --exclude-files ".*\\.lock$|.*\\.pyc$|.*/__pycache__/.*" \
            --exclude-lines "password.*=.*test|secret.*=.*dummy" \
            fragrance_ai/ || true

          detect-secrets audit .secrets.baseline || true

      - name: Run OWASP dependency check
        if: inputs.enable-dependency-check
        continue-on-error: true
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'fragrance-ai'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
            .secrets.baseline
            dependency-check-report.html

      - name: Security scan summary
        if: always()
        run: |
          echo "## Security Scan Complete" >> $GITHUB_STEP_SUMMARY
          echo "- Code Scan: ${{ inputs.enable-code-scan && 'Enabled' || 'Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Check: ${{ inputs.enable-dependency-check && 'Enabled' || 'Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secrets Scan: ${{ inputs.enable-secrets-scan && 'Enabled' || 'Disabled' }}" >> $GITHUB_STEP_SUMMARY