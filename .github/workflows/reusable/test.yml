name: Reusable Test Workflow

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.10'
      test-directory:
        description: 'Test directory path'
        required: false
        type: string
        default: 'tests/'
      coverage-threshold:
        description: 'Minimum coverage percentage'
        required: false
        type: number
        default: 80
    secrets:
      CODECOV_TOKEN:
        required: false

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test-type: [unit, integration, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-timeout

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest ${{ inputs.test-directory }} \
            -v \
            --cov=fragrance_ai \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=${{ inputs.coverage-threshold }} \
            -m "not integration and not security" \
            --timeout=300

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          pytest ${{ inputs.test-directory }} \
            -v \
            -m integration \
            --timeout=600

      - name: Run security tests
        if: matrix.test-type == 'security'
        run: |
          pytest ${{ inputs.test-directory }} \
            -v \
            -m security \
            --timeout=300

      - name: Upload coverage reports
        if: matrix.test-type == 'unit' && secrets.CODECOV_TOKEN
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage.xml
            htmlcov/
            .pytest_cache/

      - name: Generate test report
        if: always()
        run: |
          echo "## Test Results: ${{ matrix.test-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python Version: ${{ inputs.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Threshold: ${{ inputs.coverage-threshold }}%" >> $GITHUB_STEP_SUMMARY