name: Reusable CI Workflow

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.10'
      environment:
        description: 'Environment name'
        required: false
        type: string
        default: 'test'
      run-security-checks:
        description: 'Run security checks'
        required: false
        type: boolean
        default: true
    secrets:
      CODECOV_TOKEN:
        required: false
      SONAR_TOKEN:
        required: false

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy
          pip install -r requirements.txt

      - name: Run Ruff
        run: ruff check fragrance_ai/ --format github
        continue-on-error: true

      - name: Run Black
        run: black --check --diff fragrance_ai/
        continue-on-error: true

      - name: Run isort
        run: isort --check-only --diff fragrance_ai/
        continue-on-error: true

      - name: Run mypy
        run: mypy fragrance_ai/ --ignore-missing-imports
        continue-on-error: true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint-and-format

    strategy:
      matrix:
        test-group: [unit, integration, security, performance]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_fragrance_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            postgresql-client \
            redis-tools

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install pytest-timeout pytest-asyncio pytest-cov

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_fragrance_db
          REDIS_URL: redis://localhost:6379
          APP_ENV: test
        run: |
          echo "DATABASE_URL=${DATABASE_URL}" >> $GITHUB_ENV
          echo "REDIS_URL=${REDIS_URL}" >> $GITHUB_ENV
          echo "APP_ENV=${APP_ENV}" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_fragrance_db

      - name: Run ${{ matrix.test-group }} tests
        run: |
          if [ "${{ matrix.test-group }}" = "unit" ]; then
            pytest tests/test_*.py -v --cov=fragrance_ai --cov-report=xml --timeout=60
          elif [ "${{ matrix.test-group }}" = "integration" ]; then
            pytest tests/integration/ -v --cov=fragrance_ai --cov-append --cov-report=xml --timeout=120
          elif [ "${{ matrix.test-group }}" = "security" ]; then
            pytest tests/security/ -v --timeout=90
          elif [ "${{ matrix.test-group }}" = "performance" ]; then
            pytest tests/performance/ -v --timeout=180
          fi
        env:
          PYTHONPATH: .
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_fragrance_db
          REDIS_URL: redis://localhost:6379
        continue-on-error: ${{ matrix.test-group == 'performance' }}

      - name: Upload coverage reports
        if: matrix.test-group == 'unit' || matrix.test-group == 'integration'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: ${{ matrix.test-group }}
          name: ${{ matrix.test-group }}-coverage
        continue-on-error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: inputs.run-security-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install security tools
        run: |
          pip install bandit safety pip-audit

      - name: Run Bandit security scan
        run: |
          bandit -r fragrance_ai/ -ll -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety check
        run: |
          pip install -r requirements.txt
          safety check --json > safety-report.json
        continue-on-error: true

      - name: Run pip-audit
        run: |
          pip-audit --desc --format json --output pip-audit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
        if: always()

  validate-orchestrator:
    name: Validate Orchestrator Exception Handling
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run orchestrator exception tests
        run: |
          # Specifically test exception handling and fallback mechanisms
          pytest tests/integration/test_orchestrator_resilience.py::TestOrchestratorResilience::test_cascading_tool_failures_with_recovery -v
          pytest tests/integration/test_orchestrator_resilience.py::TestOrchestratorResilience::test_partial_tool_success_aggregation -v
          pytest tests/integration/test_orchestrator_resilience.py::TestOrchestratorResilience::test_circuit_breaker_pattern -v
          pytest tests/integration/test_orchestrator_resilience.py::TestOrchestratorResilience::test_graceful_degradation_chain -v
        env:
          PYTHONPATH: .
          APP_ENV: test
        continue-on-error: false  # This MUST pass

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan, validate-orchestrator]
    if: always()

    steps:
      - name: Check quality gates
        run: |
          echo "Quality Gates Summary:"
          echo "====================="

          # Check if critical jobs passed
          if [ "${{ needs.validate-orchestrator.result }}" != "success" ]; then
            echo "❌ Orchestrator validation failed - BLOCKING"
            exit 1
          fi

          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "⚠️ Some tests failed - Review required"
          fi

          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "⚠️ Security issues detected - Review required"
          fi

          echo "✅ All critical quality gates passed"