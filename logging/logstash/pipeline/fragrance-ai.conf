# 🔥 Logstash 파이프라인 설정 - Fragrance AI
input {
  # 파일에서 로그 읽기
  file {
    path => "/logs/fragrance-ai/*.log"
    start_position => "beginning"
    codec => "json"
    tags => ["fragrance-ai", "application"]
  }

  # JSON Lines 형식 로그
  file {
    path => "/logs/fragrance-ai/*.jsonl"
    start_position => "beginning"
    codec => "json_lines"
    tags => ["fragrance-ai", "structured"]
  }

  # Docker 로그
  file {
    path => "/var/log/containers/fragrance-ai*.log"
    start_position => "beginning"
    codec => "json"
    tags => ["fragrance-ai", "docker"]
  }

  # Redis를 통한 실시간 로그 스트림
  redis {
    host => "redis"
    port => 6379
    key => "fragrance-ai:logs"
    data_type => "list"
    codec => "json"
    tags => ["fragrance-ai", "realtime"]
  }

  # Beats 입력 (Filebeat, Metricbeat 등)
  beats {
    port => 5044
    tags => ["fragrance-ai", "beats"]
  }

  # HTTP 엔드포인트 (웹훅)
  http {
    port => 8080
    codec => "json"
    tags => ["fragrance-ai", "webhook"]
  }
}

filter {
  # Fragrance AI 로그만 처리
  if "fragrance-ai" in [tags] {

    # 타임스탬프 파싱
    if [timestamp] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }

    # 로그 레벨 정규화
    if [level] {
      mutate {
        uppercase => [ "level" ]
      }
    }

    # IP 주소 GeoIP 조회
    if [client_ip] {
      geoip {
        source => "client_ip"
        target => "geoip"
      }
    }

    # 사용자 에이전트 파싱
    if [user_agent] {
      useragent {
        source => "user_agent"
        target => "ua"
      }
    }

    # 에러 메시지 분류
    if [error] {
      if [error][type] {
        mutate {
          add_field => { "error_category" => "%{[error][type]}" }
        }
      }

      # 스택 트레이스 줄바꿈 정리
      if [error][traceback] {
        mutate {
          gsub => [ "[error][traceback]", "\n", " | " ]
        }
      }
    }

    # API 엔드포인트 정규화
    if [endpoint] {
      # ID나 UUID 패턴을 일반화
      mutate {
        gsub => [
          "endpoint", "/\d+", "/{id}",
          "endpoint", "/[a-f0-9\-]{36}", "/{uuid}",
          "endpoint", "/[a-f0-9]{32}", "/{hash}"
        ]
      }
    }

    # 성능 메트릭 분류
    if [metrics] {
      if [metrics][response_time_ms] {
        if [metrics][response_time_ms] > 2000 {
          mutate {
            add_field => { "performance_category" => "slow" }
          }
        } else if [metrics][response_time_ms] > 1000 {
          mutate {
            add_field => { "performance_category" => "medium" }
          }
        } else {
          mutate {
            add_field => { "performance_category" => "fast" }
          }
        }
      }
    }

    # 보안 이벤트 감지
    if [category] == "security" {
      mutate {
        add_field => { "alert_priority" => "high" }
      }

      # SQL 인젝션 패턴 감지
      if [message] =~ /(?i)(union|select|insert|update|delete|drop|create|alter|exec|script|<script|javascript:)/ {
        mutate {
          add_field => { "security_threat" => "sql_injection_or_xss" }
        }
      }

      # 브루트 포스 공격 감지
      if [event_type] == "failed_login" {
        mutate {
          add_field => { "security_threat" => "brute_force" }
        }
      }
    }

    # 사용자 세션 정보 추가
    if [context] and [context][user_id] {
      mutate {
        add_field => { "user_id" => "%{[context][user_id]}" }
      }
    }

    # 서비스 정보 보강
    mutate {
      add_field => {
        "service_name" => "fragrance-ai"
        "service_version" => "2.0.0"
        "log_source" => "logstash"
      }
    }

    # 환경 정보 추가
    if [context] and [context][environment] {
      mutate {
        add_field => { "environment" => "%{[context][environment]}" }
      }
    } else {
      mutate {
        add_field => { "environment" => "production" }
      }
    }

    # 불필요한 필드 제거
    mutate {
      remove_field => [ "host", "path", "@version" ]
    }

    # 중요도 점수 계산
    ruby {
      code => "
        score = 0

        # 레벨에 따른 점수
        case event.get('level')
        when 'CRITICAL'
          score += 100
        when 'ERROR'
          score += 70
        when 'WARNING'
          score += 40
        when 'INFO'
          score += 10
        end

        # 카테고리에 따른 점수
        case event.get('category')
        when 'security'
          score += 50
        when 'performance'
          score += 30
        when 'api'
          score += 20
        end

        # 오류가 있으면 추가 점수
        if event.get('error')
          score += 30
        end

        event.set('importance_score', score)
      "
    }
  }

  # Docker 로그 특별 처리
  if "docker" in [tags] {
    # 컨테이너 정보 추출
    grok {
      match => { "path" => "/var/log/containers/%{DATA:pod_name}_%{DATA:namespace}_%{DATA:container_name}-%{DATA:container_id}.log" }
    }
  }

  # 에러 로그 알림 조건
  if [level] == "ERROR" or [level] == "CRITICAL" {
    mutate {
      add_field => { "needs_alert" => "true" }
    }
  }

  # 지연 시간 임계값 초과 알림
  if [metrics] and [metrics][response_time_ms] and [metrics][response_time_ms] > 5000 {
    mutate {
      add_field => { "needs_alert" => "true" }
      add_field => { "alert_reason" => "high_response_time" }
    }
  }
}

output {
  # Elasticsearch 인덱스별 분기
  if "fragrance-ai" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "fragrance-ai-logs-%{+YYYY.MM.dd}"
      template_name => "fragrance-ai"
      template => "/etc/logstash/templates/fragrance-ai-template.json"
      template_overwrite => true
    }

    # 에러 로그는 별도 인덱스
    if [level] == "ERROR" or [level] == "CRITICAL" {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "fragrance-ai-errors-%{+YYYY.MM.dd}"
      }
    }

    # 보안 이벤트는 별도 인덱스
    if [category] == "security" {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "fragrance-ai-security-%{+YYYY.MM.dd}"
      }
    }

    # 성능 로그는 별도 인덱스
    if [category] == "performance" {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "fragrance-ai-performance-%{+YYYY.MM.dd}"
      }
    }
  }

  # 실시간 알림이 필요한 경우
  if [needs_alert] == "true" {
    # Slack 웹훅
    http {
      url => "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
      http_method => "post"
      format => "json"
      content_type => "application/json"
      mapping => {
        "text" => "🚨 Fragrance AI 알림: %{message}"
        "channel" => "#alerts"
        "username" => "LogstashBot"
        "icon_emoji" => ":warning:"
        "attachments" => [
          {
            "color" => "danger"
            "fields" => [
              {
                "title" => "레벨"
                "value" => "%{level}"
                "short" => true
              },
              {
                "title" => "카테고리"
                "value" => "%{category}"
                "short" => true
              },
              {
                "title" => "시간"
                "value" => "%{@timestamp}"
                "short" => true
              },
              {
                "title" => "서비스"
                "value" => "%{service_name}"
                "short" => true
              }
            ]
          }
        ]
      }
    }

    # PagerDuty 통합 (중요한 알림)
    if [importance_score] and [importance_score] > 80 {
      http {
        url => "https://events.pagerduty.com/v2/enqueue"
        http_method => "post"
        format => "json"
        headers => {
          "Authorization" => "Token token=YOUR_PAGERDUTY_TOKEN"
        }
        mapping => {
          "routing_key" => "YOUR_INTEGRATION_KEY"
          "event_action" => "trigger"
          "payload" => {
            "summary" => "Fragrance AI 중요 알림: %{message}"
            "source" => "%{service_name}"
            "severity" => "critical"
            "component" => "%{category}"
            "group" => "fragrance-ai"
            "class" => "%{level}"
            "custom_details" => {
              "timestamp" => "%{@timestamp}"
              "environment" => "%{environment}"
              "error_type" => "%{[error][type]}"
              "importance_score" => "%{importance_score}"
            }
          }
        }
      }
    }

    # Discord 웹훅 (선택사항)
    http {
      url => "https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK"
      http_method => "post"
      format => "json"
      content_type => "application/json"
      mapping => {
        "content" => "🚨 **Fragrance AI 알림**\n**메시지**: %{message}\n**레벨**: %{level}\n**카테고리**: %{category}\n**시간**: %{@timestamp}"
        "username" => "Fragrance AI Bot"
        "avatar_url" => "https://example.com/bot-avatar.png"
      }
    }
  }

  # 디버그 출력 (개발 환경)
  if [environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }

  # 메트릭 데이터를 InfluxDB로 전송
  if [metrics] {
    influxdb {
      host => "influxdb"
      port => 8086
      database => "fragrance_ai_metrics"
      measurement => "application_metrics"
      send_as_tags => ["level", "category", "service_name", "environment"]
    }
  }

  # 파일 백업 (로컬 저장소)
  file {
    path => "/backup/logs/fragrance-ai-%{+YYYY-MM-dd}.log"
    codec => "json_lines"
  }
}

# 로그 파이프라인 모니터링
monitoring {
  enabled => true
  collection_interval => "1s"
  collection_timeout_interval => "10s"
}