version: '3.8'

# Production Docker Compose Configuration
# Enhanced security, performance, and monitoring

services:
  # PostgreSQL Database - Production hardened
  postgres:
    image: postgres:15-alpine
    container_name: fragrance_ai_postgres_prod
    environment:
      POSTGRES_DB: fragrance_ai
      POSTGRES_USER: fragrance_ai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-local=peer --auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
      - ./configs/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fragrance_ai -d fragrance_ai"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fragrance_ai_internal
    restart: always
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    read_only: true
    tmpfs:
      - /tmp:size=100M,mode=1777
      - /var/run/postgresql:size=50M,mode=0755
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Production optimized
  redis:
    image: redis:7-alpine
    container_name: fragrance_ai_redis_prod
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1024mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --timeout 300
      --tcp-keepalive 60
      --maxclients 10000
    volumes:
      - redis_data:/data:Z
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - fragrance_ai_internal
    restart: always
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=50M,mode=1777
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ChromaDB Vector Database
  chroma:
    image: chromadb/chroma:0.4.18
    container_name: fragrance_ai_chroma_prod
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8001
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=False
    volumes:
      - chroma_data:/chroma/chroma:Z
    networks:
      - fragrance_ai_internal
    restart: always
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main Application - Production optimized
  fragrance_ai:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: fragrance_ai:production
    container_name: fragrance_ai_app_prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://fragrance_ai:${POSTGRES_PASSWORD}@postgres:5432/fragrance_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8001
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-["https://yourdomain.com"]}
      - WORKERS=4
      - MAX_REQUESTS=1000
      - TIMEOUT=120
      - LOG_LEVEL=info
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - ./data:/app/data:Z
      - ./logs:/app/logs:Z
      - ./models:/app/models:ro
      - ./checkpoints:/app/checkpoints:Z
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "10", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    networks:
      - fragrance_ai_internal
      - fragrance_ai_external
    restart: always
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /app/tmp:size=200M,mode=1777
      - /tmp:size=100M,mode=1777
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3.0'
        reservations:
          memory: 2G
          cpus: '2.0'
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 30s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: fragrance_ai_nginx_prod
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx:Z
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - fragrance_ai
    networks:
      - fragrance_ai_external
    restart: always
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:size=100M,mode=0755
      - /var/run:size=50M,mode=0755
      - /tmp:size=50M,mode=1777
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: fragrance_ai_prometheus_prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus:Z
    networks:
      - fragrance_ai_internal
    restart: always
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Grafana Visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: fragrance_ai_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana:Z
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - fragrance_ai_internal
    restart: always
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fragrance_ai/postgres_data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fragrance_ai/redis_data
  chroma_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fragrance_ai/chroma_data
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fragrance_ai/prometheus_data
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/fragrance_ai/grafana_data

networks:
  fragrance_ai_internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
  fragrance_ai_external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16