version: '3.8'

services:
  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: fragrance-postgres
    restart: always
    environment:
      POSTGRES_DB: fragrance_ai
      POSTGRES_USER: ${DB_USER:-fragrance}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_EXTENSIONS: vector
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fragrance"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fragrance-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fragrance-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fragrance-network

  # Ollama for LLM
  ollama:
    image: ollama/ollama:latest
    container_name: fragrance-ollama
    restart: always
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      OLLAMA_KEEP_ALIVE: "5m"
      OLLAMA_HOST: "0.0.0.0"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - fragrance-network

  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: fragrance-api
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${DB_USER:-fragrance}:${DB_PASSWORD:-secure_password}@postgres:5432/fragrance_ai
      REDIS_URL: redis://redis:6379
      OLLAMA_BASE_URL: http://ollama:11434
      APP_ENV: production
      SECRET_KEY: ${SECRET_KEY}
      LOG_LEVEL: info
    ports:
      - "8001:8001"
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models:ro
      - ./data:/app/data:ro
    networks:
      - fragrance-network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: fragrance-nginx
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - fragrance-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fragrance-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - fragrance-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: fragrance-grafana
    restart: always
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    networks:
      - fragrance-network

networks:
  fragrance-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  prometheus_data:
  grafana_data: