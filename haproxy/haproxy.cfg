global
    daemon
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # SSL 설정
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-sslv3

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option redispatch
    retries 3
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# 통계 페이지
frontend stats
    bind *:8404
    stats enable
    stats uri /
    stats refresh 10s
    stats admin if TRUE

# HTTP -> HTTPS 리디렉션
frontend http_frontend
    bind *:80
    mode http

    # Health check 허용
    acl health_check path_beg /health
    use_backend fragrance_ai_backend if health_check

    # 나머지는 HTTPS로 리디렉션
    redirect scheme https code 301

# HTTPS 프론트엔드
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/fragrance_ai.pem
    mode http

    # 보안 헤더
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"

    # 요청 로깅 및 추적
    capture request header X-Forwarded-For len 15
    capture request header User-Agent len 50

    # ACL 정의
    acl is_api path_beg /api
    acl is_admin path_beg /admin
    acl is_docs path_beg /docs
    acl is_health path_beg /health
    acl is_metrics path_beg /metrics

    # Rate Limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }

    # 백엔드 라우팅
    use_backend fragrance_ai_backend if is_api
    use_backend fragrance_ai_backend if is_admin
    use_backend fragrance_ai_backend if is_docs
    use_backend fragrance_ai_backend if is_health
    use_backend prometheus_backend if is_metrics

    default_backend fragrance_ai_backend

# Fragrance AI 애플리케이션 백엔드
backend fragrance_ai_backend
    mode http
    balance roundrobin

    # 헬스체크
    option httpchk GET /health
    http-check expect status 200

    # 세션 지속성 (필요시)
    # cookie SERVERID insert indirect nocache

    # 서버 정의 (동적으로 스케일됨)
    server app1 fragrance_ai_1:8000 check inter 10s fall 3 rise 2 weight 100
    server app2 fragrance_ai_2:8000 check inter 10s fall 3 rise 2 weight 100
    server app3 fragrance_ai_3:8000 check inter 10s fall 3 rise 2 weight 100

    # 백업 서버 (유지보수용)
    # server backup fragrance_ai_backup:8000 check backup

# Prometheus 백엔드
backend prometheus_backend
    mode http
    balance roundrobin

    # 내부 접근만 허용
    acl internal_network src 172.25.0.0/16
    http-request deny if !internal_network

    server prometheus prometheus:9090 check

# 글로벌 에러 처리
backend error_503
    mode http
    errorfile 503 /etc/haproxy/errors/503.http