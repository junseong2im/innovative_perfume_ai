version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fragrance_ai_postgres_prod
    environment:
      POSTGRES_DB: fragrance_ai
      POSTGRES_USER: fragrance_ai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fragrance_ai"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fragrance_ai_redis_prod
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # ChromaDB Vector Database
  chroma:
    image: chromadb/chroma:0.4.18
    container_name: fragrance_ai_chroma_prod
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8001
      - PERSIST_DIRECTORY=/chroma/chroma
      - CHROMA_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenAuthCredentialsProvider
      - CHROMA_AUTH_TOKEN_TRANSPORT_HEADER=X_CHROMA_TOKEN
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN}
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/api/v1/heartbeat || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Main Application
  fragrance_ai:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: fragrance_ai:production
    container_name: fragrance_ai_app_prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://fragrance_ai:${POSTGRES_PASSWORD}@postgres:5432/fragrance_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8001
      - SECRET_KEY=${SECRET_KEY}
      - WANDB_API_KEY=${WANDB_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
      - ./models:/app/models
      - ./checkpoints:/app/checkpoints
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Celery Worker
  celery_worker:
    image: fragrance_ai:production
    container_name: fragrance_ai_celery_prod
    command: celery -A fragrance_ai.celery_app worker --loglevel=info --concurrency=8 --prefetch-multiplier=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://fragrance_ai:${POSTGRES_PASSWORD}@postgres:5432/fragrance_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./checkpoints:/app/checkpoints
    depends_on:
      - redis
      - postgres
      - fragrance_ai
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 6G

  # Celery Beat Scheduler
  celery_beat:
    image: fragrance_ai:production
    container_name: fragrance_ai_celery_beat_prod
    command: celery -A fragrance_ai.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://fragrance_ai:${POSTGRES_PASSWORD}@postgres:5432/fragrance_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - fragrance_ai_network
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    image: fragrance_ai:production
    container_name: fragrance_ai_flower_prod
    command: celery -A fragrance_ai.celery_app flower --port=5555 --basic_auth=admin:${FLOWER_PASSWORD}
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - fragrance_ai_network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: fragrance_ai_prometheus_prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:10.1.0
    container_name: fragrance_ai_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: fragrance_ai_nginx_prod
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - fragrance_ai
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  fragrance_ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16