# Kubernetes Deployment for Fragrance AI Production
apiVersion: v1
kind: Namespace
metadata:
  name: fragrance-ai
  labels:
    app: fragrance-ai
    environment: production
---
# ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: fragrance-ai-config
  namespace: fragrance-ai
data:
  ENVIRONMENT: "production"
  DEBUG: "false"
  LOG_LEVEL: "INFO"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  CORS_ORIGINS: '["https://yourdomain.com"]'
  RATE_LIMIT_ENABLED: "true"
  REQUESTS_PER_MINUTE: "100"
  PROMETHEUS_ENABLED: "true"
  METRICS_PORT: "9090"
  CHROMA_HOST: "chromadb-service"
  CHROMA_PORT: "8000"
  REDIS_URL: "redis://redis-service:6379/0"
  DATABASE_URL: "postgresql://fragrance_user:$(POSTGRES_PASSWORD)@postgres-service:5432/fragrance_ai"
---
# Secret for Sensitive Configuration
apiVersion: v1
kind: Secret
metadata:
  name: fragrance-ai-secrets
  namespace: fragrance-ai
type: Opaque
stringData:
  SECRET_KEY: "your-super-secure-secret-key-change-this-in-production"
  JWT_SECRET_KEY: "your-jwt-secret-key-change-this-in-production"
  POSTGRES_PASSWORD: "your-secure-postgres-password"
  REDIS_PASSWORD: "your-redis-password"
  GRAFANA_ADMIN_PASSWORD: "your-grafana-password"
  AWS_ACCESS_KEY_ID: "your-aws-access-key"
  AWS_SECRET_ACCESS_KEY: "your-aws-secret-key"
---
# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: fragrance-ai
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
# Persistent Volume Claim for Redis
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: fragrance-ai
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
# Persistent Volume Claim for ChromaDB
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: chromadb-pvc
  namespace: fragrance-ai
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: fragrance-ai
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: fragrance_ai
        - name: POSTGRES_USER
          value: fragrance_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fragrance-ai-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8 --locale=C"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - fragrance_user
            - -d
            - fragrance_ai
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - fragrance_user
            - -d
            - fragrance_ai
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: fragrance-ai
  labels:
    app: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: fragrance-ai
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        - --appendonly
        - "yes"
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: fragrance-ai
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
  type: ClusterIP
---
# ChromaDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chromadb
  namespace: fragrance-ai
  labels:
    app: chromadb
    component: vectordb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chromadb
  template:
    metadata:
      labels:
        app: chromadb
        component: vectordb
    spec:
      containers:
      - name: chromadb
        image: chromadb/chroma:latest
        env:
        - name: CHROMA_SERVER_HOST
          value: "0.0.0.0"
        - name: CHROMA_SERVER_HTTP_PORT
          value: "8000"
        - name: PERSIST_DIRECTORY
          value: "/chroma/data"
        - name: IS_PERSISTENT
          value: "TRUE"
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: chromadb-storage
          mountPath: /chroma/data
        livenessProbe:
          httpGet:
            path: /api/v1/heartbeat
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/heartbeat
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
      volumes:
      - name: chromadb-storage
        persistentVolumeClaim:
          claimName: chromadb-pvc
---
# ChromaDB Service
apiVersion: v1
kind: Service
metadata:
  name: chromadb-service
  namespace: fragrance-ai
  labels:
    app: chromadb
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: chromadb
  type: ClusterIP
---
# Fragrance AI Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fragrance-ai-app
  namespace: fragrance-ai
  labels:
    app: fragrance-ai-app
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fragrance-ai-app
  template:
    metadata:
      labels:
        app: fragrance-ai-app
        component: api
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U fragrance_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-service -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
      containers:
      - name: fragrance-ai
        image: fragrance-ai:latest
        envFrom:
        - configMapRef:
            name: fragrance-ai-config
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: fragrance-ai-secrets
              key: SECRET_KEY
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: fragrance-ai-secrets
              key: JWT_SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fragrance-ai-secrets
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: model-cache
          mountPath: /app/models
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: model-cache
        emptyDir:
          sizeLimit: 10Gi
---
# Fragrance AI Service
apiVersion: v1
kind: Service
metadata:
  name: fragrance-ai-service
  namespace: fragrance-ai
  labels:
    app: fragrance-ai-app
spec:
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  selector:
    app: fragrance-ai-app
  type: ClusterIP
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fragrance-ai-hpa
  namespace: fragrance-ai
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fragrance-ai-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# Ingress for External Access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fragrance-ai-ingress
  namespace: fragrance-ai
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "60"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  tls:
  - hosts:
    - api.yourdomain.com
    secretName: fragrance-ai-tls
  rules:
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fragrance-ai-service
            port:
              number: 8000
---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fragrance-ai-network-policy
  namespace: fragrance-ai
spec:
  podSelector:
    matchLabels:
      app: fragrance-ai-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: chromadb
    ports:
    - protocol: TCP
      port: 8000
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80