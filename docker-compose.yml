version: '3.8'

services:
  # PostgreSQL Database with security enhancements
  postgres:
    image: postgres:15-alpine
    container_name: fragrance_ai_postgres
    environment:
      POSTGRES_DB: fragrance_ai
      POSTGRES_USER: fragrance_ai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fragrance_ai_password}
      POSTGRES_INITDB_ARGS: "--auth-local=peer --auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"  # 외부 접근 가능 (필요시)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fragrance_ai -d fragrance_ai"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache with security enhancements
  redis:
    image: redis:7-alpine
    container_name: fragrance_ai_redis
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis_password}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
    volumes:
      - redis_data:/data:Z
    ports:
      - "6379:6379"  # 외부 접근 가능 (필요시)
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # ChromaDB Vector Database
  chroma:
    image: chromadb/chroma:latest
    container_name: fragrance_ai_chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8001
      - PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8001"
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8000/api/v2/heartbeat || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    networks:
      - fragrance_ai_network

  # Main Application with production security
  fragrance_ai:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fragrance_ai_app
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://fragrance_ai:${POSTGRES_PASSWORD:-fragrance_ai_password}@postgres:5432/fragrance_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8001
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - WANDB_API_KEY=${WANDB_API_KEY}
      - WORKERS=4
      - MAX_REQUESTS=1000
      - TIMEOUT=120
      - LOG_LEVEL=info
    volumes:
      - ./data:/app/data:Z
      - ./logs:/app/logs:Z
      - ./models:/app/models:ro
      - ./checkpoints:/app/checkpoints:Z
    ports:
      - "8080:8000"  # 외부 접근 가능
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # chroma:
      #   condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "10", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - fragrance_ai_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /app/tmp:size=100M,mode=1777
      - /tmp:size=50M,mode=1777
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fragrance_ai_celery
    command: celery -A fragrance_ai.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://fragrance_ai:${POSTGRES_PASSWORD:-fragrance_ai_password}@postgres:5432/fragrance_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./checkpoints:/app/checkpoints
    depends_on:
      - redis
      - postgres
    networks:
      - fragrance_ai_network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fragrance_ai_celery_beat
    command: celery -A fragrance_ai.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://fragrance_ai:${POSTGRES_PASSWORD:-fragrance_ai_password}@postgres:5432/fragrance_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - fragrance_ai_network
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fragrance_ai_flower
    command: celery -A fragrance_ai.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - fragrance_ai_network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: fragrance_ai_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fragrance_ai_network
    restart: unless-stopped

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: fragrance_ai_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - fragrance_ai_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fragrance_ai_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - fragrance_ai
    networks:
      - fragrance_ai_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  chroma_data:
  prometheus_data:
  grafana_data:

networks:
  fragrance_ai_network:
    driver: bridge