# ============================================================================
# NGINX Canary Deployment Configuration
# Production configuration with weighted traffic routing support
# ============================================================================
#
# This configuration enables canary deployments with progressive rollout:
#   - 1% → 5% → 25% → 100% traffic stages
#   - Automatic failover to production on errors
#   - Detailed logging for monitoring
#
# Usage:
#   1. Set environment variables: PRODUCTION_WEIGHT, CANARY_WEIGHT
#   2. Use envsubst to replace variables in upstream.conf.template
#   3. Reload NGINX: nginx -s reload
#
# ============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ========================================================================
    # Logging Configuration
    # ========================================================================

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format detailed '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';

    log_format canary '$remote_addr - [$time_local] "$request" '
                      'status=$status bytes=$body_bytes_sent '
                      'upstream=$upstream_addr '
                      'upstream_status=$upstream_status '
                      'upstream_response_time=$upstream_response_time '
                      'request_time=$request_time '
                      'version=$upstream_http_x_version';

    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/canary.log canary;
    error_log /var/log/nginx/error.log warn;

    # ========================================================================
    # Performance Optimization
    # ========================================================================

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Connection pooling
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss
               application/rss+xml font/truetype font/opentype
               application/vnd.ms-fontobject image/svg+xml;

    # ========================================================================
    # Proxy Settings
    # ========================================================================

    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;

    # Buffering
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    # ========================================================================
    # Upstream Configuration (weighted canary routing)
    # ========================================================================

    include /etc/nginx/conf.d/upstream.conf;

    # ========================================================================
    # Main Application Server (with canary support)
    # ========================================================================

    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # NGINX health check (does not proxy to backend)
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Application health check (checks both production and canary)
        location /health {
            proxy_pass http://health_check;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Health-Check "true";

            access_log /var/log/nginx/health_check.log detailed;
        }

        # Main application routes (weighted routing to production + canary)
        location / {
            # Route to weighted upstream (production + canary)
            proxy_pass http://app_backend;

            # Preserve original request info
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Retry on failure (automatically fail over from canary to production)
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 30s;

            # Access log with canary tracking
            access_log /var/log/nginx/app_access.log canary;
        }

        # API routes
        location /api/ {
            proxy_pass http://app_backend;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Retry configuration
            proxy_next_upstream error timeout http_502 http_503;
            proxy_next_upstream_tries 2;

            access_log /var/log/nginx/api_access.log canary;
        }

        # API documentation (Swagger UI) - production only
        location /docs {
            proxy_pass http://app:8000;  # Always use production
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # OpenAPI schema - production only
        location /openapi.json {
            proxy_pass http://app:8000;  # Always use production
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Prometheus metrics endpoint - aggregated from both versions
        location /metrics {
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            access_log off;
        }

        # Canary-specific metrics (canary version only)
        location /metrics/canary {
            proxy_pass http://app-canary:8001/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            access_log off;
        }

        # Production-specific metrics (production version only)
        location /metrics/production {
            proxy_pass http://app:8000/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            access_log off;
        }

        # Static files (if any)
        location /static/ {
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            expires 1d;
            add_header Cache-Control "public, immutable";
        }

        # Error pages
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # ========================================================================
    # Metrics & Monitoring Server
    # ========================================================================

    server {
        listen 8080;
        server_name _;

        # NGINX status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
        }

        # NGINX health check
        location /health {
            return 200 '{"status": "healthy", "service": "nginx"}';
            add_header Content-Type application/json;
            access_log off;
        }

        # Access to NGINX logs (for debugging)
        location /logs/access {
            alias /var/log/nginx/access.log;
            types { } default_type text/plain;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            deny all;
        }

        location /logs/canary {
            alias /var/log/nginx/canary.log;
            types { } default_type text/plain;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            deny all;
        }

        location /logs/error {
            alias /var/log/nginx/error.log;
            types { } default_type text/plain;
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            deny all;
        }
    }

    # ========================================================================
    # WebSocket Connection Upgrade Mapping
    # ========================================================================

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
}
